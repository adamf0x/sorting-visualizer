{"version":3,"sources":["GetSortAnimations.js","SortingVis.jsx","App.js","serviceWorker.js","index.js"],"names":["qsanimations","getQuicksortAnimations","array","left","right","quickSortAnimations","index","length","items","pivotindex","compare","pivot","Math","floor","i","j","indexOf","push","swaps","swap","partition","leftIndex","rightIndex","temp","numBars","barWidth","SortingVis","props","state","this","generateArray","max","arr","random","setState","delay","animations","bubbleSortAnimations","elems","document","getElementsByClassName","bar1","bar2","setTimeout","style","backgroundColor","height","argument","comparecount","qsdelay","Helmet","className","onClick","e","getElementById","options","selectedIndex","value","bubbleSort","quickSort","alert","Slider","min","step","onChange","num","defaultValue","valueLabelDisplay","aria-labelledby","id","map","key","width","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84a6513d.chunk.js","sourcesContent":["export function bubbleSortAnimations(array) {\r\n  const animations = [];\r\n\r\n  for (let i = 1; i < array.length; i++) {\r\n    for (let j = 0; j < i; j++) {\r\n      var compare = [i, j];\r\n      var swap = [];\r\n      if (array[i] < array[j]) {\r\n        swap = [i, j];\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n      }\r\n      //push one comparison to signify the change from one colour to another and another to signify the change back to the original colour\r\n      animations.push(compare);\r\n      animations.push(compare);\r\n      //push the elemnts to swap if they exist\r\n      animations.push(swap);\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\n//qsanimations has to be initilized globally as to allow the partition function to add animations to it \r\nvar qsanimations = [];\r\nexport function getQuicksortAnimations(array, left, right){\r\n  //make sure the qs animations array is empty before calling the quicksortanimations function\r\n  qsanimations = [];\r\n  quickSortAnimations(array, left, right);\r\n  return qsanimations;\r\n}\r\nexport function quickSortAnimations(array, left, right){\r\n  var index;\r\n  if (array.length > 1) {\r\n    index = partition(array, left, right); //index returned from partition\r\n    if (left < index - 1) {\r\n      //more elements on the left side of the pivot\r\n      quickSortAnimations(array, left, index - 1);\r\n    }\r\n    if (index < right) {\r\n      //more elements on the right side of the pivot\r\n      quickSortAnimations(array, index, right);\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\n\r\nfunction swap(items, leftIndex, rightIndex) {\r\n  var temp = items[leftIndex];\r\n  items[leftIndex] = items[rightIndex];\r\n  items[rightIndex] = temp;\r\n  \r\n}\r\n\r\nfunction partition(items, left, right) {\r\n  var compare = [];\r\n  var pivotindex;\r\n  var pivot = items[Math.floor((right + left) / 2)], //middle element\r\n  i = left, //left pointer\r\n  j = right; //right pointer\r\n  pivotindex = items.indexOf(pivot);\r\n  while (i <= j) {\r\n    //if the left index is larger than the right index return the new partition and execute quicksort with the new partition\r\n    compare = [i,j];\r\n    //the aray containing the indexes of the two bars being compared is added to the animations twice to execute the animations similar to bubble sort\r\n    qsanimations.push(compare);\r\n    qsanimations.push(compare);\r\n    qsanimations.push(pivotindex);\r\n    while (items[i] < pivot) {\r\n      //for items smaller than the pivot element increment the left index\r\n      i++;\r\n      compare = [i,j];\r\n      qsanimations.push(compare);\r\n      qsanimations.push(compare);\r\n      qsanimations.push(pivotindex);\r\n    }\r\n    while (items[j] > pivot) {\r\n      //for items larger than the pivot element decrement the right index\r\n      j--;\r\n      compare = [i,j];\r\n      qsanimations.push(compare);\r\n      qsanimations.push(compare);\r\n      qsanimations.push(pivotindex);\r\n    }\r\n    var swaps = [];\r\n    //if i is smaller than j and the loop is running swap the two elements\r\n    if (i <= j) {\r\n      swap(items, i, j); //sawpping two elements\r\n      swaps = [i,j, 1]\r\n      i++;\r\n      j--;\r\n    }\r\n    //push to two elements to be swapped into the list quicksort animations array\r\n    qsanimations.push(swaps);\r\n    qsanimations.push(pivotindex);\r\n  }\r\n  return i;\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./SortingVis.css\";\r\nimport {\r\n  bubbleSortAnimations,\r\n  getQuicksortAnimations,\r\n} from \"./GetSortAnimations\";\r\nimport { Slider } from \"@material-ui/core\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nvar numBars = 100;\r\nvar barWidth = Math.floor(1000 * (1 / numBars));\r\n\r\nexport class SortingVis extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateArray(numBars);\r\n  }\r\n  generateArray(numBars) {\r\n    var max = 0;\r\n    if (numBars <= 50) {\r\n      max = 100;\r\n    } else {\r\n      max = numBars * 1.5;\r\n    }\r\n    var min = 5;\r\n    var arr = [];\r\n    for (let i = 0; i < numBars; i++) {\r\n      arr.push(Math.floor(Math.random() * (max - min + 1) + min));\r\n    }\r\n    this.setState({ array: arr });\r\n  }\r\n\r\n  bubbleSort() {\r\n    var delay = Math.floor(1000 * (1 / (numBars * 2)));\r\n    const animations = bubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const elems = document.getElementsByClassName(\"bar\");\r\n      //if the loop is not on a element that signifies a swap\r\n      if (i % 3 !== 2) {\r\n        const bar1 = elems[animations[i][0]];\r\n        const bar2 = elems[animations[i][1]];\r\n        //setting the elements to alternate colour\r\n        if (i % 3 === 0) {\r\n          setTimeout(() => {\r\n            bar1.style.backgroundColor = \"red\";\r\n            bar2.style.backgroundColor = \"red\";\r\n          }, i * delay);\r\n        } else {\r\n          //return the elements that were altered to the original colour\r\n          setTimeout(() => {\r\n            bar1.style.backgroundColor = \"turquoise\";\r\n            bar2.style.backgroundColor = \"turquoise\";\r\n          }, i * delay);\r\n        }\r\n        //if the loop is on an element that signifies a swap of two bars in the array, swap their heights\r\n      } else {\r\n        if (animations[i].length !== 0) {\r\n          setTimeout(() => {\r\n            var bar1 = elems[animations[i][0]];\r\n            var bar2 = elems[animations[i][1]];\r\n            var temp = bar1.style.height;\r\n            bar1.style.height = `${bar2.style.height}`;\r\n            bar2.style.height = `${temp}`;\r\n          }, i * delay);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  isInteger(argument) {\r\n    return argument === ~~argument;\r\n  }\r\n\r\n  quickSort() {\r\n    //initialize a comparisson count to be used to know if the comparisson array in the animations array indicated a swap to the alternate colour or back to the original colour\r\n    var comparecount = 0;\r\n    var qsdelay = Math.floor(1000 * (1 / (numBars * 2)));\r\n    //get the list of quick sort animations\r\n    const animations = getQuicksortAnimations(\r\n      this.state.array,\r\n      0,\r\n      this.state.array.length - 1\r\n    );\r\n    //similar procedure as that of bubble sort\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const elems = document.getElementsByClassName(\"bar\");\r\n      if (animations[i].length === 2) {\r\n        comparecount++;\r\n        if (comparecount % 2 !== 0) {\r\n          setTimeout(() => {\r\n            var bar1 = elems[animations[i][0]];\r\n            var bar2 = elems[animations[i][1]];\r\n            bar1.style.backgroundColor = \"red\";\r\n            bar2.style.backgroundColor = \"red\";\r\n          }, i * qsdelay);\r\n        } else {\r\n          setTimeout(() => {\r\n            var bar1 = elems[animations[i][0]];\r\n            var bar2 = elems[animations[i][1]];\r\n            bar1.style.backgroundColor = \"turquoise\";\r\n            bar2.style.backgroundColor = \"turquoise\";\r\n          }, i * qsdelay);\r\n        }\r\n      }\r\n      if (animations[i].length === 3) {\r\n        setTimeout(() => {\r\n          var bar1 = elems[animations[i][0]];\r\n          var bar2 = elems[animations[i][1]];\r\n          var temp = bar1.style.height;\r\n          bar1.style.height = bar2.style.height;\r\n          bar2.style.height = temp;\r\n        }, i * qsdelay);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const title = \"Sorting Visualizer\";\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <title>{title}</title>\r\n        </Helmet>\r\n        <div className=\"buttons\">\r\n          <button\r\n            className=\"action\"\r\n            onClick={() => this.generateArray(numBars)}\r\n          >\r\n            generate array\r\n          </button>\r\n          <button\r\n            className=\"action\"\r\n            onClick={() => {\r\n              var e = document.getElementById(\"Algs\");\r\n              var val = e.options[e.selectedIndex].value;\r\n              switch (val) {\r\n                case \"Bubble Sort\":\r\n                  this.bubbleSort();\r\n                  break;\r\n                case \"Quick Sort\":\r\n                  this.quickSort();\r\n                  break;\r\n                default:\r\n                  alert(\"select a different algorithm\");\r\n                  break;\r\n              }\r\n            }}\r\n          >\r\n            visualize sorting\r\n          </button>\r\n          <div className=\"slider\">\r\n            <div className=\"sliderText\">\r\n              Number of array elements/sorting speed:\r\n            </div>\r\n            <Slider\r\n              min={2}\r\n              step={1}\r\n              max={450}\r\n              onChange={(e, num) => {\r\n                numBars = num;\r\n                if (numBars < 20) {\r\n                  barWidth = 70;\r\n                } else {\r\n                  barWidth = Math.floor(1000 * (1 / numBars));\r\n                }\r\n                this.generateArray(numBars);\r\n              }}\r\n              defaultValue={100}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-labelledby=\"non-linear-slider\"\r\n            ></Slider>\r\n          </div>\r\n        </div>\r\n        <div className=\"selector\">\r\n          <p>Choose an Algorithm:</p>\r\n          <select id=\"Algs\">\r\n            <option value=\"Bubble Sort\">Bubble Sort</option>\r\n            <option value=\"Quick Sort\">Quick Sort</option>\r\n            <option value=\"Merge Sort\">Merge Sort</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"container\">\r\n          {array.map((value, index) => (\r\n            <div\r\n              className=\"bar\"\r\n              key={index}\r\n              style={{ height: `${value}px`, width: `${barWidth}px` }}\r\n            >\r\n              {value}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport{\n  SortingVis,\n}from './SortingVis'; \nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVis></SortingVis>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}