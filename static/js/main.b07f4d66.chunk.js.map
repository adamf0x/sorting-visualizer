{"version":3,"sources":["SortingVis.jsx","App.js","serviceWorker.js","index.js"],"names":["SortingVis","props","state","array","this","generateArray","arr","i","push","Math","floor","random","setState","length","j","temp","className","onClick","bubbleSort","map","value","index","key","style","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAIaA,G,WAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,IAJQ,EADrB,gEAUQC,KAAKC,kBAVb,sCAgBI,IAHA,IAEIC,EAAM,GACFC,EAAI,EAAGA,EAAI,IAAKA,IACpBD,EAAIE,KAAKC,KAAKC,MAAM,GAAAD,KAAKE,SAHnB,KAKVP,KAAKQ,SAAS,CAACT,MAAOG,MAnB1B,mCAwBI,IADA,IAAIA,EAAMF,KAAKF,MAAMC,MACbI,EAAI,EAAGA,EAAID,EAAIO,OAAQN,IAC7B,IAAI,IAAIO,EAAI,EAAGA,EAAIP,EAAGO,IACpB,GAAGR,EAAIC,GAAKD,EAAIQ,GAAG,CACjB,IAAIC,EAAOT,EAAIC,GACfD,EAAIC,GAAKD,EAAIQ,GACbR,EAAIQ,GAAKC,EAIfX,KAAKQ,SAAS,CAACT,MAAOG,MAjC1B,+BAoCW,IAAD,OACGH,EAASC,KAAKF,MAAdC,MACP,OACI,yBAAKa,UAAY,aACd,yBAAKA,UAAY,WAChB,4BAAQC,QAAW,kBAAM,EAAKZ,kBAA9B,eACA,4BAAQY,QAAW,kBAAM,EAAKC,eAA9B,SAEHf,EAAMgB,KAAI,SAACC,EAAOC,GAAR,OACH,yBAAKL,UAAY,MAAMM,IAAOD,EAAOE,MAAS,CAAC,OAAS,GAAT,OAAaH,EAAb,MAAwB,MAAQ,GAAR,OAAYA,EAAZ,QAClEA,WA9CvB,GAAgCI,IAAMC,YCWvBC,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCEcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b07f4d66.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./SortingVis.css\"\r\n\r\nexport class SortingVis extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n        this.generateArray();\r\n  }\r\n  generateArray() {\r\n    var max = 100;\r\n    var min = 10;\r\n    var arr = [];\r\n    for(let i = 0; i < 100; i++){\r\n        arr.push(Math.floor(Math.random() * (max - min + 1) + min));\r\n    }\r\n    this.setState({array: arr});\r\n  }\r\n\r\n  bubbleSort(){\r\n    let arr = this.state.array;\r\n    for(let i = 1; i < arr.length; i++){\r\n      for(let j = 0; j < i; j++){\r\n        if(arr[i] < arr[j]){\r\n          let temp = arr[i];\r\n          arr[i] = arr[j];\r\n          arr[j] = temp;\r\n        }\r\n      }\r\n    }\r\n    this.setState({array: arr});\r\n  }\r\n  \r\n  render(){\r\n      const {array} = this.state;\r\n      return(\r\n          <div className = 'container'>\r\n             <div className = 'buttons'>\r\n              <button onClick = {() => this.generateArray()}>reset array</button>\r\n              <button onClick = {() => this.bubbleSort()}>sort</button>\r\n          </div>\r\n          {array.map((value, index) =>(\r\n                  <div className = 'bar' key = {index} style = {{'height': `${value}px`, 'width': `${value}px`}}>\r\n                      {value}\r\n                  </div>\r\n              ))}\r\n          </div>\r\n      )\r\n  }\r\n  \r\n}\r\n\r\n","import React from 'react';\nimport{\n  SortingVis,\n}from './SortingVis'; \nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVis></SortingVis>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}