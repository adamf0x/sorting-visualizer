{"version":3,"sources":["GetSortAnimations.js","SortingVis.jsx","App.js","serviceWorker.js","index.js"],"names":["qsanimations","getQuicksortAnimations","array","left","right","quickSortAnimations","index","length","items","pivotindex","compare","pivot","Math","floor","i","j","indexOf","push","swaps","swap","partition","leftIndex","rightIndex","temp","getMergeSortAnimations","animations","auxiliaryArray","slice","mergeSort","low","high","aux","middle","mid","k","merge","numBars","barWidth","barColor","SortingVis","props","state","this","generateArray","max","arr","random","setState","elems","document","getElementsByClassName","style","backgroundColor","delay","bubbleSortAnimations","bar1","bar2","setTimeout","height","textContent","replace","comparecount","qsdelay","mergedelay","compareCount","barToOverwrite","Helmet","className","onClick","setColour","e","getElementById","options","selectedIndex","value","bubbleSort","quickSort","alert","Slider","min","step","onChange","num","defaultValue","valueLabelDisplay","aria-labelledby","id","map","key","width","color","React","Component","customStyles","content","top","bottom","marginRight","transform","Modal","setAppElement","App","useState","modalIsOpen","setModalIsOpen","isOpen","onRequestClose","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0cb9422b.chunk.js","sourcesContent":["export function bubbleSortAnimations(array) {\r\n  const animations = [];\r\n\r\n  for (let i = 1; i < array.length; i++) {\r\n    for (let j = 0; j < i; j++) {\r\n      var compare = [i, j];\r\n      var swap = [];\r\n      if (array[i] < array[j]) {\r\n        swap = [i, j];\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n      }\r\n      //push one comparison to signify the change from one colour to another and another to signify the change back to the original colour\r\n      animations.push(compare);\r\n      animations.push(compare);\r\n      //push the elemnts to swap if they exist\r\n      animations.push(swap);\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\n//qsanimations has to be initilized globally as to allow the partition function to add animations to it\r\nvar qsanimations = [];\r\nexport function getQuicksortAnimations(array, left, right) {\r\n  //make sure the qs animations array is empty before calling the quicksortanimations function\r\n  qsanimations = [];\r\n  quickSortAnimations(array, left, right);\r\n  return qsanimations;\r\n}\r\nexport function quickSortAnimations(array, left, right) {\r\n  var index;\r\n  if (array.length > 1) {\r\n    index = partition(array, left, right); //index returned from partition\r\n    if (left < index - 1) {\r\n      //more elements on the left side of the pivot\r\n      quickSortAnimations(array, left, index - 1);\r\n    }\r\n    if (index < right) {\r\n      //more elements on the right side of the pivot\r\n      quickSortAnimations(array, index, right);\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction swap(items, leftIndex, rightIndex) {\r\n  var temp = items[leftIndex];\r\n  items[leftIndex] = items[rightIndex];\r\n  items[rightIndex] = temp;\r\n}\r\n\r\nfunction partition(items, left, right) {\r\n  var compare = [];\r\n  var pivotindex;\r\n  var pivot = items[Math.floor((right + left) / 2)], //the partition is the middle element of the array\r\n    i = left, //left pointer\r\n    j = right; //right pointer\r\n  pivotindex = items.indexOf(pivot);\r\n  while (i <= j) {\r\n    //if the left index is larger than the right index return the new partition and execute quicksort with the new partition\r\n    compare = [i, j];\r\n    //the aray containing the indexes of the two bars being compared is added to the animations twice to execute the animations similar to bubble sort\r\n    qsanimations.push(compare);\r\n    qsanimations.push(compare);\r\n    qsanimations.push(pivotindex);\r\n    while (items[i] < pivot) {\r\n      //for items smaller than the pivot element increment the left index\r\n      i++;\r\n      compare = [i, j];\r\n      qsanimations.push(compare);\r\n      qsanimations.push(compare);\r\n      qsanimations.push(pivotindex);\r\n    }\r\n    while (items[j] > pivot) {\r\n      //for items larger than the pivot element decrement the right index\r\n      j--;\r\n      compare = [i, j];\r\n      qsanimations.push(compare);\r\n      qsanimations.push(compare);\r\n      qsanimations.push(pivotindex);\r\n    }\r\n    var swaps = [];\r\n    //if i is smaller than j and the loop is running swap the two elements\r\n    if (i <= j) {\r\n      swap(items, i, j); //sawpping two elements\r\n      swaps = [i, j, 1];\r\n      i++;\r\n      j--;\r\n    }\r\n    //push to two elements to be swapped into the list quicksort animations array\r\n    qsanimations.push(swaps);\r\n    qsanimations.push(pivotindex);\r\n  }\r\n  return i;\r\n}\r\n\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\n\r\n// Sort array arr [low..high] using auxiliary array aux\r\nfunction mergeSort(array, low, high, aux, animations) {\r\n  // Base case\r\n  if (low === high) {\r\n    return;\r\n  }\r\n  const middle = Math.floor((low+high)/2);\r\n  //call mergesort then merge each half of the array\r\n  mergeSort(aux, low, middle, array, animations);\r\n  mergeSort(aux, middle+1, high, array, animations);\r\n  merge(array, low, middle, high, aux, animations);\r\n}\r\n\r\n// Merge two sorted sub-arrays arr[low .. mid] and arr[mid + 1 .. high]\r\nfunction merge(array, low, mid, high, aux, animations) {\r\n  //initialize three monitor variables to keep track of where you are in auxiliary array and main array\r\n  let k = low;\r\n  let i = low; \r\n  let j = mid+1;\r\n  while(i <= mid && j <= high){\r\n    //push indexes to animate twice to achieve same effect as in other algorithms \r\n    animations.push([i,j]);\r\n    animations.push([i,j]);\r\n    //if the lower index is less than the higher index put the element at the lower index into the original array from the auxiliary array first\r\n    if(aux[i] <= aux[j]){\r\n      animations.push([k,aux[i],1])\r\n      array[k++] = aux[i++];\r\n    }else{\r\n      //otherwise put the element at the higher index in first\r\n      animations.push([k,aux[j],1])\r\n      array[k++] = aux[j++];\r\n    }\r\n  }\r\n  while(i <= mid){\r\n    //copy in the remaining elements from the aux array into the remining array (first half)\r\n    animations.push([i,i]);\r\n    animations.push([i,i]);\r\n    animations.push([k, aux[i],1]);\r\n    array[k++] = aux[i++];\r\n  }\r\n   //copy in the remaining elements from the aux array into the remining array (second half)\r\n  while(j <= high){\r\n    animations.push([j,j]);\r\n    animations.push([j,j]);\r\n    animations.push([k, aux[j],1]);\r\n    array[k++] = aux[j++];\r\n  }\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport \"./SortingVis.css\";\r\nimport {\r\n  bubbleSortAnimations,\r\n  getQuicksortAnimations,\r\n  getMergeSortAnimations,\r\n} from \"./GetSortAnimations\";\r\nimport { Slider } from \"@material-ui/core\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Modal from \"react-modal\";\r\n\r\nvar numBars = 100;\r\nvar barWidth = Math.floor(1000 * (1 / numBars));\r\nvar barColor = \"transparent\";\r\nvar barBackground = \"pink\";\r\n\r\nexport class SortingVis extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateArray(numBars);\r\n  }\r\n  generateArray(numBars) {\r\n    var max = 0;\r\n    if (numBars <= 50) {\r\n      max = 100;\r\n    } else {\r\n      max = numBars * 1.5;\r\n    }\r\n    var min = 20;\r\n    var arr = [];\r\n    for (let i = 0; i < numBars; i++) {\r\n      arr.push(Math.floor(Math.random() * (max - min + 1) + min));\r\n    }\r\n    this.setState({ array: arr });\r\n  }\r\n  setColour() {\r\n    const elems = document.getElementsByClassName(\"bar\");\r\n    for (var i of elems) {\r\n      i.style.backgroundColor = barBackground;\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    var delay = Math.floor(1000 * (1 / (numBars * 2)));\r\n    const animations = bubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const elems = document.getElementsByClassName(\"bar\");\r\n      //if the loop is not on a element that signifies a swap\r\n      if (i % 3 !== 2) {\r\n        const bar1 = elems[animations[i][0]];\r\n        const bar2 = elems[animations[i][1]];\r\n        //setting the elements to alternate colour\r\n        if (i % 3 === 0) {\r\n          setTimeout(() => {\r\n            bar1.style.backgroundColor = \"red\";\r\n            bar2.style.backgroundColor = \"red\";\r\n          }, i * delay);\r\n        } else {\r\n          //return the elements that were altered to the original colour\r\n          setTimeout(() => {\r\n            bar1.style.backgroundColor = \"pink\";\r\n            bar2.style.backgroundColor = \"pink\";\r\n          }, i * delay);\r\n        }\r\n        //if the loop is on an element that signifies a swap of two bars in the array, swap their heights\r\n      } else {\r\n        if (animations[i].length !== 0) {\r\n          setTimeout(() => {\r\n            var bar1 = elems[animations[i][0]];\r\n            var bar2 = elems[animations[i][1]];\r\n            var temp = bar1.style.height;\r\n            bar1.style.height = `${bar2.style.height}`;\r\n            bar1.textContent = `${bar2.style.height}`.replace(\"px\", \"\");\r\n            bar2.style.height = `${temp}`;\r\n            bar2.textContent = `${temp}`.replace(\"px\", \"\");\r\n          }, i * delay);\r\n        }\r\n      }\r\n      if (i === animations.length - 1) {\r\n        setTimeout(() => {\r\n          for (let j = 0; j < elems.length; j++) {\r\n            setTimeout(() => {\r\n              elems[j].style.backgroundColor = \"lime\";\r\n            }, j * delay);\r\n          }\r\n        }, delay * animations.length);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    //initialize a comparisson count to be used to know if the comparisson array in the animations array indicated a swap to the alternate colour or back to the original colour\r\n    var comparecount = 0;\r\n    var qsdelay = Math.floor(1000 * (1 / (numBars * 2)));\r\n    //get the list of quick sort animations\r\n    const animations = getQuicksortAnimations(\r\n      this.state.array,\r\n      0,\r\n      this.state.array.length - 1\r\n    );\r\n    //similar procedure as that of bubble sort\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const elems = document.getElementsByClassName(\"bar\");\r\n      if (animations[i].length === 2) {\r\n        comparecount++;\r\n        if (comparecount % 2 !== 0) {\r\n          setTimeout(() => {\r\n            var bar1 = elems[animations[i][0]];\r\n            var bar2 = elems[animations[i][1]];\r\n            bar1.style.backgroundColor = \"red\";\r\n            bar2.style.backgroundColor = \"red\";\r\n          }, i * qsdelay);\r\n        } else {\r\n          setTimeout(() => {\r\n            var bar1 = elems[animations[i][0]];\r\n            var bar2 = elems[animations[i][1]];\r\n            bar1.style.backgroundColor = \"pink\";\r\n            bar2.style.backgroundColor = \"pink\";\r\n          }, i * qsdelay);\r\n        }\r\n      }\r\n      if (animations[i].length === 3) {\r\n        setTimeout(() => {\r\n          var bar1 = elems[animations[i][0]];\r\n          var bar2 = elems[animations[i][1]];\r\n          var temp = bar1.style.height;\r\n          bar1.style.height = `${bar2.style.height}`;\r\n          bar1.textContent = `${bar2.style.height}`.replace(\"px\", \"\");\r\n          bar2.style.height = `${temp}`;\r\n          bar2.textContent = `${temp}`.replace(\"px\", \"\");\r\n        }, i * qsdelay);\r\n      }\r\n      if (i === animations.length - 1) {\r\n        setTimeout(() => {\r\n          for (let j = 0; j < elems.length; j++) {\r\n            setTimeout(() => {\r\n              elems[j].style.backgroundColor = \"lime\";\r\n            }, j * qsdelay);\r\n          }\r\n        }, qsdelay * animations.length);\r\n      }\r\n    }\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    var mergedelay = Math.floor(1000 * (1 / (numBars * 2)));\r\n    var compareCount = 0;\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const elems = document.getElementsByClassName(\"bar\");\r\n      if (animations.length === 0) {\r\n        continue;\r\n      }\r\n      if (animations[i].length !== 3) {\r\n        compareCount++;\r\n        if (compareCount % 2 !== 0) {\r\n          setTimeout(() => {\r\n            var bar1 = elems[animations[i][0]];\r\n            var bar2 = elems[animations[i][1]];\r\n            bar1.style.backgroundColor = \"red\";\r\n            bar2.style.backgroundColor = \"red\";\r\n          }, i * mergedelay);\r\n        } else {\r\n          setTimeout(() => {\r\n            var bar1 = elems[animations[i][0]];\r\n            var bar2 = elems[animations[i][1]];\r\n            bar1.style.backgroundColor = \"pink\";\r\n            bar2.style.backgroundColor = \"pink\";\r\n          }, i * mergedelay);\r\n        }\r\n      } else {\r\n        setTimeout(() => {\r\n          var barToOverwrite = elems[animations[i][0]];\r\n          var height = animations[i][1];\r\n          barToOverwrite.style.height = `${height}px`;\r\n          barToOverwrite.textContent = `${height}`.replace(\"px\", \"\");\r\n        }, i * mergedelay);\r\n      }\r\n      if (i === animations.length - 1) {\r\n        setTimeout(() => {\r\n          for (let j = 0; j < elems.length; j++) {\r\n            setTimeout(() => {\r\n              elems[j].style.backgroundColor = \"lime\";\r\n            }, j * mergedelay);\r\n          }\r\n        }, mergedelay * animations.length);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const title = \"Sorting Visualizer\";\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <title>{title}</title>\r\n        </Helmet>\r\n        <div className=\"buttons\">\r\n          <button\r\n            className=\"action\"\r\n            onClick={() => {\r\n              this.setColour();\r\n              this.generateArray(numBars);\r\n            }}\r\n          >\r\n            generate array\r\n          </button>\r\n          <button\r\n            className=\"action\"\r\n            onClick={() => {\r\n              var e = document.getElementById(\"Algs\");\r\n              var val = e.options[e.selectedIndex].value;\r\n              switch (val) {\r\n                case \"Bubble Sort\":\r\n                  this.setColour();\r\n                  this.bubbleSort();\r\n                  break;\r\n                case \"Quick Sort\":\r\n                  this.setColour();\r\n                  this.quickSort();\r\n                  break;\r\n                case \"Merge Sort\":\r\n                  this.setColour();\r\n                  this.mergeSort();\r\n                  break;\r\n                default:\r\n                  alert(\"select a different algorithm\");\r\n                  break;\r\n              }\r\n            }}\r\n          >\r\n            visualize sorting\r\n          </button>\r\n          <div className=\"slider\">\r\n            <div className=\"sliderText\">\r\n              Number of array elements/sorting speed:\r\n            </div>\r\n            <Slider\r\n              min={3}\r\n              step={1}\r\n              max={450}\r\n              onChange={(e, num) => {\r\n                numBars = num;\r\n                if (num <= 30) {\r\n                  barColor = \"black\";\r\n                } else {\r\n                  barColor = \"transparent\";\r\n                }\r\n                if (numBars < 20) {\r\n                  barWidth = 70;\r\n                } else {\r\n                  barWidth = Math.floor(1000 * (1 / numBars));\r\n                }\r\n                this.generateArray(numBars);\r\n                this.setColour();\r\n              }}\r\n              defaultValue={100}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-labelledby=\"non-linear-slider\"\r\n            ></Slider>\r\n          </div>\r\n        </div>\r\n        <div className=\"selector\">\r\n          <p>Choose an Algorithm:</p>\r\n          <select id=\"Algs\" onChange={()=>{\r\n            this.generateArray(numBars);\r\n            this.setColour();\r\n          }}>\r\n            <option value=\"Bubble Sort\">Bubble Sort</option>\r\n            <option value=\"Quick Sort\">Quick Sort</option>\r\n            <option value=\"Merge Sort\">Merge Sort</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"container\">\r\n          {array.map((value, index) => (\r\n            <div\r\n              className=\"bar\"\r\n              key={index}\r\n              style={{\r\n                height: `${value}px`,\r\n                width: `${barWidth}px`,\r\n                color: `${barColor}`,\r\n                backgroundColor: `${barBackground}`,\r\n              }}\r\n            >\r\n              {value}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\nimport { SortingVis } from \"./SortingVis\";\nimport \"./App.css\";\nimport Modal from \"react-modal\";\nimport styles from \"./SortingVis.css\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nModal.setAppElement(\"#root\");\nfunction App() {\n  const [modalIsOpen, setModalIsOpen] = useState(true);\n  return (\n    <div className=\"App\">\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={() => setModalIsOpen(false)}\n        style={customStyles}\n      >\n        <h2 className=\"modalheader\">Welcome to My Sorting Visualizer!</h2>\n        <p className=\"modalheader\">\n          Select a sorting algorithm and array size from the drop down menu and\n          slider at the top of the page.<br></br> Click generate array to\n          generate new array elements or the visualize button to visualize\n          sorting!\n        </p>\n        <div className=\"modalheader\">\n          <button className=\"action\" onClick={() => setModalIsOpen(false)}>\n            Click To Close Instructions\n          </button>\n        </div>\n      </Modal>\n      <SortingVis></SortingVis>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}