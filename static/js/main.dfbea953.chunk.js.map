{"version":3,"sources":["SortingVis.jsx","GetBubbleSortAnimations.js","App.js","serviceWorker.js","index.js"],"names":["numBars","barWidth","Math","floor","SortingVis","props","state","array","this","generateArray","max","arr","i","push","random","setState","delay","animations","length","j","compare","swap","temp","bubbleSortAnimations","elems","document","getElementsByClassName","bar1","bar2","setTimeout","style","backgroundColor","height","className","onClick","bubbleSort","Slider","min","step","onChange","e","num","defaultValue","valueLabelDisplay","aria-labelledby","map","value","index","key","width","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAMIA,EAAU,IACVC,EAAWC,KAAKC,MAAc,EAAIH,EAAZ,KAEbI,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,IAJQ,EADrB,gEAUIC,KAAKC,cAAcT,KAVvB,oCAYgBA,GAIZ,IAHA,IAAIU,EAAgB,EAAVV,EAENW,EAAM,GACDC,EAAI,EAAGA,EAAIZ,EAASY,IAC3BD,EAAIE,KAAKX,KAAKC,MAAMD,KAAKY,UAAYJ,EAH7B,EAGyC,GAHzC,IAKVF,KAAKO,SAAS,CAAER,MAAOI,MAnB3B,mCAyBI,IAFA,IAAIK,EAAQd,KAAKC,MAAc,GAAKH,EAAU,IAAvB,KACjBiB,ECjCH,SAA8BV,GAGnC,IAFA,IAAMU,EAAa,GAEVL,EAAI,EAAGA,EAAIL,EAAMW,OAAQN,IAChC,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAGO,IAAK,CAC1B,IAAIC,EAAU,CAACR,EAAEO,GACbE,EAAO,GACX,GAAId,EAAMK,GAAKL,EAAMY,GAAI,CACvBE,EAAO,CAACT,EAAEO,GACV,IAAIG,EAAOf,EAAMK,GACjBL,EAAMK,GAAKL,EAAMY,GACjBZ,EAAMY,GAAKG,EAGbL,EAAWJ,KAAKO,GAChBH,EAAWJ,KAAKO,GAEhBH,EAAWJ,KAAKQ,GAGpB,OAAOJ,EDacM,CAAqBf,KAAKF,MAAMC,OAFxC,WAGFK,GACP,IAAMY,EAAQC,SAASC,uBAAuB,OAE9C,GAAId,EAAI,IAAM,EAAG,CACf,IAAMe,EAAOH,EAAMP,EAAWL,GAAG,IAC3BgB,EAAOJ,EAAMP,EAAWL,GAAG,IAE7BA,EAAI,IAAM,EACZiB,YAAW,WACTF,EAAKG,MAAMC,gBAAkB,MAC7BH,EAAKE,MAAMC,gBAAkB,QAC5BnB,EAAII,GAGPa,YAAW,WACTF,EAAKG,MAAMC,gBAAkB,YAC7BH,EAAKE,MAAMC,gBAAkB,cAC5BnB,EAAII,QAIoB,IAAzBC,EAAWL,GAAGM,QAChBW,YAAW,WACT,IAAIF,EAAOH,EAAMP,EAAWL,GAAG,IAC3BgB,EAAOJ,EAAMP,EAAWL,GAAG,IAC3BU,EAAOK,EAAKG,MAAME,OACtBL,EAAKG,MAAME,OAAX,UAAuBJ,EAAKE,MAAME,QAClCJ,EAAKE,MAAME,OAAX,UAAuBV,KACtBV,EAAII,IA5BJJ,EAAI,EAAGA,EAAIK,EAAWC,OAAQN,IAAM,EAApCA,KAzBb,+BA2DY,IAAD,OACCL,EAAUC,KAAKF,MAAfC,MACR,OACE,6BACE,yBAAK0B,UAAU,WACb,4BAAQA,UAAU,SAASC,QAAS,kBAAM,EAAKzB,cAAcT,KAA7D,kBAGA,4BAAQiC,UAAU,SAASC,QAAS,kBAAM,EAAKC,eAA/C,qBAGA,yBAAKF,UAAU,UACb,yBAAKA,UAAY,cAAjB,2CACA,kBAACG,EAAA,EAAD,CACEC,IAAK,EACLC,KAAM,EACN5B,IAAK,IACL6B,SAAY,SAACC,EAAGC,GAAOzC,EAAUyC,EAAKxC,EAAWC,KAAKC,MAAc,EAAIH,EAAZ,KAAuB,EAAKS,cAAcT,IACtG0C,aAAc,IACdC,kBAAkB,OAClBC,kBAAgB,wBAItB,yBAAKX,UAAU,aACZ1B,EAAMsC,KAAI,SAACC,EAAOC,GAAR,OACT,yBACEd,UAAU,MACVe,IAAKD,EACLjB,MAAO,CAAEE,OAAO,GAAD,OAAKc,EAAL,MAAgBG,MAAM,GAAD,OAAKhD,EAAL,QAEnC6C,YA1Ff,GAAgCI,IAAMC,WEMvBC,MARf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,QCEcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnC,SAASoC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dfbea953.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./SortingVis.css\";\r\nimport { bubbleSortAnimations } from \"./GetBubbleSortAnimations\";\r\nimport { Slider } from \"@material-ui/core\";\r\n\r\nvar numBars = 100;\r\nvar barWidth = Math.floor(1000 * (1 / numBars));\r\n\r\nexport class SortingVis extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateArray(numBars);\r\n  }\r\n  generateArray(numBars) {\r\n    var max = numBars * 3;\r\n    var min = 5;\r\n    var arr = [];\r\n    for (let i = 0; i < numBars; i++) {\r\n      arr.push(Math.floor(Math.random() * (max - min + 1) + min));\r\n    }\r\n    this.setState({ array: arr });\r\n  }\r\n\r\n  bubbleSort() {\r\n    var delay = Math.floor(1000 * (1 / (numBars + 10)));\r\n    const animations = bubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const elems = document.getElementsByClassName(\"bar\");\r\n      //if the loop is not on a element that signifies a swap\r\n      if (i % 3 !== 2) {\r\n        const bar1 = elems[animations[i][0]];\r\n        const bar2 = elems[animations[i][1]];\r\n        //setting the elements to alternate colour\r\n        if (i % 3 === 0) {\r\n          setTimeout(() => {\r\n            bar1.style.backgroundColor = \"red\";\r\n            bar2.style.backgroundColor = \"red\";\r\n          }, i * delay);\r\n        } else {\r\n          //return the elements that were altered to the original colour\r\n          setTimeout(() => {\r\n            bar1.style.backgroundColor = \"turquoise\";\r\n            bar2.style.backgroundColor = \"turquoise\";\r\n          }, i * delay);\r\n        }\r\n        //if the loop is on an element that signifies a swap of two bars in the array, swap their heights\r\n      } else {\r\n        if (animations[i].length !== 0) {\r\n          setTimeout(() => {\r\n            var bar1 = elems[animations[i][0]];\r\n            var bar2 = elems[animations[i][1]];\r\n            var temp = bar1.style.height;\r\n            bar1.style.height = `${bar2.style.height}`;\r\n            bar2.style.height = `${temp}`;\r\n          }, i * delay);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"buttons\">\r\n          <button className=\"action\" onClick={() => this.generateArray(numBars)}>\r\n            generate array\r\n          </button>\r\n          <button className=\"action\" onClick={() => this.bubbleSort()}>\r\n            visualize sorting\r\n          </button>\r\n          <div className=\"slider\">\r\n            <div className = 'sliderText'>Number of array elements/sorting speed:</div>\r\n            <Slider\r\n              min={0}\r\n              step={1}\r\n              max={300}\r\n              onChange = {(e, num)=>{numBars = num; barWidth = Math.floor(1000 * (1 / numBars)); this.generateArray(numBars)}}\r\n              defaultValue={100}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-labelledby=\"non-linear-slider\"\r\n            ></Slider>\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n          {array.map((value, index) => (\r\n            <div\r\n              className=\"bar\"\r\n              key={index}\r\n              style={{ height: `${value}px`, width: `${barWidth}px` }}\r\n            >\r\n              {value}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export function bubbleSortAnimations(array) {\r\n  const animations = [];\r\n\r\n  for (let i = 1; i < array.length; i++) {\r\n    for (let j = 0; j < i; j++) {\r\n      var compare = [i,j];\r\n      var swap = [];\r\n      if (array[i] < array[j]) {\r\n        swap = [i,j]\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n      }\r\n      //push one comparison to signify the change from one colour to another and another to signify the change back to the original colour\r\n      animations.push(compare);\r\n      animations.push(compare);\r\n      //push the elemnts to swap if they exist\r\n      animations.push(swap);\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n","import React from 'react';\nimport{\n  SortingVis,\n}from './SortingVis'; \nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVis></SortingVis>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}