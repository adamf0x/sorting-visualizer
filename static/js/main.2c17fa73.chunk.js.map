{"version":3,"sources":["GetSortAnimations.js","SortingVis.jsx","App.js","serviceWorker.js","index.js"],"names":["quickSortAnimations","array","lo","hi","index","length","items","left","right","pivot","Math","floor","i","j","swap","partition","console","log","leftIndex","rightIndex","temp","numBars","barWidth","SortingVis","props","state","this","generateArray","max","arr","push","random","setState","delay","animations","compare","bubbleSortAnimations","elems","document","getElementsByClassName","bar1","bar2","setTimeout","style","backgroundColor","height","Helmet","className","onClick","e","getElementById","options","selectedIndex","value","bubbleSort","alert","Slider","min","step","onChange","num","defaultValue","valueLabelDisplay","aria-labelledby","id","map","key","width","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2c17fa73.chunk.js","sourcesContent":["export function bubbleSortAnimations(array) {\r\n  const animations = [];\r\n\r\n  for (let i = 1; i < array.length; i++) {\r\n    for (let j = 0; j < i; j++) {\r\n      var compare = [i, j];\r\n      var swap = [];\r\n      if (array[i] < array[j]) {\r\n        swap = [i, j];\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n      }\r\n      //push one comparison to signify the change from one colour to another and another to signify the change back to the original colour\r\n      animations.push(compare);\r\n      animations.push(compare);\r\n      //push the elemnts to swap if they exist\r\n      animations.push(swap);\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\n\r\nexport function quickSortAnimations(array, lo, hi) {\r\n  var index;\r\n  if (array.length > 1) {\r\n    index = partition(array, lo, hi); //index returned from partition\r\n    console.log(\"index: \" + index);\r\n    console.log(\"lower: \" + lo)\r\n    console.log(\"higher: \" + hi)\r\n    if (lo < index - 1) {\r\n      //more elements on the left side of the pivot\r\n      quickSortAnimations(array, lo, index - 1);\r\n    }\r\n    if (index < hi) {\r\n      //more elements on the right side of the pivot\r\n      quickSortAnimations(array, index, hi);\r\n    }\r\n  }\r\n  console.log(array);\r\n  return array;\r\n}\r\n\r\nfunction swap(items, leftIndex, rightIndex) {\r\n  var temp = items[leftIndex];\r\n  items[leftIndex] = items[rightIndex];\r\n  items[rightIndex] = temp;\r\n}\r\n\r\nfunction partition(items, left, right) {\r\n  var pivot = items[Math.floor((right + left) / 2)], //middle element\r\n  i = left, //left pointer\r\n  j = right; //right pointer\r\n  while (i <= j) {\r\n    while (items[i] < pivot) {\r\n      i++;\r\n    }\r\n    while (items[j] > pivot) {\r\n      j--;\r\n    }\r\n    if (i <= j) {\r\n      swap(items, i, j); //sawpping two elements\r\n      i++;\r\n      j--;\r\n    }\r\n  }\r\n  return i;\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./SortingVis.css\";\r\nimport { bubbleSortAnimations, quickSortAnimations } from \"./GetSortAnimations\";\r\nimport { Slider } from \"@material-ui/core\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nvar numBars = 100;\r\nvar barWidth = Math.floor(1000 * (1 / numBars));\r\n\r\nexport class SortingVis extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateArray(numBars);\r\n  }\r\n  generateArray(numBars) {\r\n    var max = numBars * 3;\r\n    var min = 5;\r\n    var arr = [];\r\n    for (let i = 0; i < numBars; i++) {\r\n      arr.push(Math.floor(Math.random() * (max - min + 1) + min));\r\n    }\r\n    this.setState({ array: arr });\r\n  }\r\n\r\n  bubbleSort() {\r\n    var delay = Math.floor(1000 * (1 / (numBars * 2)));\r\n    const animations = bubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const elems = document.getElementsByClassName(\"bar\");\r\n      //if the loop is not on a element that signifies a swap\r\n      if (i % 3 !== 2) {\r\n        const bar1 = elems[animations[i][0]];\r\n        const bar2 = elems[animations[i][1]];\r\n        //setting the elements to alternate colour\r\n        if (i % 3 === 0) {\r\n          setTimeout(() => {\r\n            bar1.style.backgroundColor = \"red\";\r\n            bar2.style.backgroundColor = \"red\";\r\n          }, i * delay);\r\n        } else {\r\n          //return the elements that were altered to the original colour\r\n          setTimeout(() => {\r\n            bar1.style.backgroundColor = \"turquoise\";\r\n            bar2.style.backgroundColor = \"turquoise\";\r\n          }, i * delay);\r\n        }\r\n        //if the loop is on an element that signifies a swap of two bars in the array, swap their heights\r\n      } else {\r\n        if (animations[i].length !== 0) {\r\n          setTimeout(() => {\r\n            var bar1 = elems[animations[i][0]];\r\n            var bar2 = elems[animations[i][1]];\r\n            var temp = bar1.style.height;\r\n            bar1.style.height = `${bar2.style.height}`;\r\n            bar2.style.height = `${temp}`;\r\n          }, i * delay);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const title = \"Sorting Visualizer\";\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <title>{title}</title>\r\n        </Helmet>\r\n        <div className=\"buttons\">\r\n          <button\r\n            className=\"action\"\r\n            onClick={() => this.generateArray(numBars)}\r\n          >\r\n            generate array\r\n          </button>\r\n          <button\r\n            className=\"action\"\r\n            onClick={() => {\r\n              var e = document.getElementById(\"Algs\");\r\n              var val = e.options[e.selectedIndex].value;\r\n              switch (val) {\r\n                case \"Bubble Sort\":\r\n                  this.bubbleSort();\r\n                  break;\r\n                case \"Quick Sort\":\r\n                  this.state.array = quickSortAnimations(this.state.array, 0, this.state.array.length -1);\r\n                  this.setState({array: this.state.array});\r\n                  break;\r\n                default:\r\n                  alert(\"select a different algorithm\");\r\n                  break;\r\n              }\r\n            }}\r\n          >\r\n            visualize sorting\r\n          </button>\r\n          <div className=\"slider\">\r\n            <div className=\"sliderText\">\r\n              Number of array elements/sorting speed:\r\n            </div>\r\n            <Slider\r\n              min={1}\r\n              step={1}\r\n              max={500}\r\n              onChange={(e, num) => {\r\n                numBars = num;\r\n                if (numBars < 20) {\r\n                  barWidth = 70;\r\n                } else {\r\n                  barWidth = Math.floor(1000 * (1 / numBars));\r\n                }\r\n                this.generateArray(numBars);\r\n              }}\r\n              defaultValue={100}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-labelledby=\"non-linear-slider\"\r\n            ></Slider>\r\n          </div>\r\n        </div>\r\n        <div className=\"selector\">\r\n          <p>Choose an Algorithm:</p>\r\n          <select id=\"Algs\">\r\n            <option value=\"Bubble Sort\">Bubble Sort</option>\r\n            <option value=\"Quick Sort\">Quick Sort</option>\r\n            <option value=\"Merge Sort\">Merge Sort</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"container\">\r\n          {array.map((value, index) => (\r\n            <div\r\n              className=\"bar\"\r\n              key={index}\r\n              style={{ height: `${value}px`, width: `${barWidth}px` }}\r\n            >\r\n              {value}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport{\n  SortingVis,\n}from './SortingVis'; \nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVis></SortingVis>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}