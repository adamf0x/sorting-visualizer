{"version":3,"sources":["SortingVis.jsx","GetBubbleSortAnimations.js","App.js","serviceWorker.js","index.js"],"names":["barWidth","Math","floor","SortingVis","props","state","array","this","generateArray","arr","i","push","random","setState","animations","length","j","animation","compare","swap","temp","bubbleSortAnimations","elems","document","getElementsByClassName","animationTriplets","setTimeout","bar1","bar2","style","height","backgroundColor","className","onClick","bubbleSort","map","value","index","key","id","width","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAIA,IACIA,EAAWC,KAAKC,MAAM,IAEbC,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,IAJQ,EADrB,gEAUIC,KAAKC,kBAVT,sCAgBI,IAHA,IAEIC,EAAM,GACDC,EAAI,EAAGA,EAnBN,IAmBmBA,IAC3BD,EAAIE,KAAKV,KAAKC,MAAM,IAAAD,KAAKW,SAHjB,KAKVL,KAAKM,SAAS,CAAEP,MAAOG,MAnB3B,mCAuBI,IADW,EACLK,EC9BH,SAA8BR,GAGnC,IAFA,IAAMQ,EAAa,GAEVJ,EAAI,EAAGA,EAAIJ,EAAMS,OAAQL,IAChC,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAGM,IAAK,CAC1B,IAAMC,EAAY,CAACC,QAAS,GAAIC,MAAM,GAGtC,GAFAF,EAAUC,QAAU,CAACR,EAAGM,GACxBC,EAAUE,MAAO,EACbb,EAAMI,GAAKJ,EAAMU,GAAI,CACvBC,EAAUE,MAAO,EACjB,IAAIC,EAAOd,EAAMI,GACjBJ,EAAMI,GAAKJ,EAAMU,GACjBV,EAAMU,GAAKI,EAEbN,EAAWH,KAAKM,GAGpB,OAAOH,EDacO,CAAqBd,KAAKF,MAAMC,OAC7CgB,EAAQC,SAASC,uBAAuB,OAC1CC,EAAoB,GAHb,cAIWX,GAJX,IAIX,2BAAkC,CAAC,IAA1BG,EAAyB,QAChCQ,EAAkBd,KAAKM,EAAUC,SACjCO,EAAkBd,KAAKM,EAAUC,SACjCO,EAAkBd,KAAKM,EAAUE,OAPxB,8BASX,IATW,eASFT,IACoB,IAAvBI,EAAWJ,GAAGS,MAChBO,YAAW,WACT,IAAIC,EAAOL,EAAMR,EAAWJ,GAAGQ,QAAQ,IACnCU,EAAON,EAAMR,EAAWJ,GAAGQ,QAAQ,IACnCE,EAAOO,EAAKE,MAAMC,OACtBH,EAAKE,MAAMC,OAASF,EAAKC,MAAMC,OAC/BF,EAAKC,MAAMC,OAASV,EACpBO,EAAKE,MAAME,gBAAkB,MAC7BH,EAAKC,MAAME,gBAAkB,QACxB,EAAJrB,GAELgB,YAAW,WACT,IAAIC,EAAOL,EAAMR,EAAWJ,GAAGQ,QAAQ,IACnCU,EAAON,EAAMR,EAAWJ,GAAGQ,QAAQ,IACvCS,EAAKE,MAAME,gBAAkB,YAC7BH,EAAKC,MAAME,gBAAkB,cACxB,EAAJrB,IAjBIA,EAAI,EAAGA,EAAII,EAAWC,OAAQL,IAAM,EAApCA,KA/Bb,+BAoDY,IAAD,OACCJ,EAAUC,KAAKF,MAAfC,MACR,OACE,6BACE,yBAAK0B,UAAU,WACb,4BAAQA,UAAU,SAASC,QAAS,kBAAM,EAAKzB,kBAA/C,eAGA,4BAAQwB,UAAU,SAASC,QAAS,kBAAM,EAAKC,eAA/C,sBAIF,yBAAKF,UAAU,aACZ1B,EAAM6B,KAAI,SAACC,EAAOC,GAAR,OACT,yBACEL,UAAU,MACVM,IAAKD,EACLE,GAAIF,EACJR,MAAO,CAAEC,OAAO,GAAD,OAAKM,EAAL,MAAgBI,MAAM,GAAD,OAAKxC,EAAL,QAEnCoC,YAxEf,GAAgCK,IAAMC,WEQvBC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCEcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e48d3ac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./SortingVis.css\";\r\nimport { bubbleSortAnimations } from \"./GetBubbleSortAnimations\";\r\nvar numBars = 100;\r\nvar barWidth = Math.floor(1000 * (1 / numBars));\r\n\r\nexport class SortingVis extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateArray();\r\n  }\r\n  generateArray() {\r\n    var max = numBars*2;\r\n    var min = 10;\r\n    var arr = [];\r\n    for (let i = 0; i < numBars; i++) {\r\n      arr.push(Math.floor(Math.random() * (max - min + 1) + min));\r\n    }\r\n    this.setState({ array: arr });\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = bubbleSortAnimations(this.state.array);\r\n    const elems = document.getElementsByClassName(\"bar\");\r\n    var animationTriplets = [];\r\n    for (var animation of animations) {\r\n      animationTriplets.push(animation.compare);\r\n      animationTriplets.push(animation.compare);\r\n      animationTriplets.push(animation.swap);\r\n    }\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (animations[i].swap === true) {\r\n        setTimeout(() => {\r\n          var bar1 = elems[animations[i].compare[0]];\r\n          var bar2 = elems[animations[i].compare[1]];\r\n          var temp = bar1.style.height;\r\n          bar1.style.height = bar2.style.height;\r\n          bar2.style.height = temp;\r\n          bar1.style.backgroundColor = \"red\";\r\n          bar2.style.backgroundColor = \"red\";\r\n        }, i * 2);\r\n      }\r\n      setTimeout(() => {\r\n        var bar1 = elems[animations[i].compare[0]];\r\n        var bar2 = elems[animations[i].compare[1]];\r\n        bar1.style.backgroundColor = \"turquoise\";\r\n        bar2.style.backgroundColor = \"turquoise\";\r\n      }, i * 3);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"buttons\">\r\n          <button className=\"action\" onClick={() => this.generateArray()}>\r\n            reset array\r\n          </button>\r\n          <button className=\"action\" onClick={() => this.bubbleSort()}>\r\n            visualize sorting\r\n          </button>\r\n        </div>\r\n        <div className=\"container\">\r\n          {array.map((value, index) => (\r\n            <div\r\n              className=\"bar\"\r\n              key={index}\r\n              id={index}\r\n              style={{ height: `${value}px`, width: `${barWidth}px` }}\r\n            >\r\n              {value}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export function bubbleSortAnimations(array) {\r\n  const animations = [];\r\n\r\n  for (let i = 1; i < array.length; i++) {\r\n    for (let j = 0; j < i; j++) {\r\n      const animation = {compare: [], swap: false };\r\n      animation.compare = [i, j];\r\n      animation.swap = false;\r\n      if (array[i] < array[j]) {\r\n        animation.swap = true;\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n      }\r\n      animations.push(animation);\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n","import React from 'react';\nimport{\n  SortingVis,\n}from './SortingVis'; \nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVis></SortingVis>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}